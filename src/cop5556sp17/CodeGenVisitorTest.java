
package cop5556sp17;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;
import org.junit.Test;

import java.io.FileOutputStream;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;

public class CodeGenVisitorTest {

	static final boolean doPrint = true;
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	boolean devel = false;
	boolean grade = true;


	@Test
	public void emptyProg() throws Exception {
		//scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + "  {}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		//write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void prog2() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog2";
		String input = progname + "  {integer i i<-3; while(i<10){ i <- i + 2;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		//write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void prog3() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog3";
		String input = progname + " {integer a \n boolean v \n integer d \n a <- 20; \n v <- true; \n d <- a + 20;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		//write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void prog4() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog4";
		String input = progname + " integer x, boolean b {b <- false; x <- 1;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		//write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[]{"2", "true"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void prog5() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog5";
		String input = progname + " {integer a boolean b if(true) {a<-4+5;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		//write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	@Test
	public void prog6() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog6";
		String input = progname + " {boolean a boolean b b<-true; while(10<10) {a<-true;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		//write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void prog7() throws Exception {
		//scan, parse, and type check the program
		String progname = "prog7";
		String input = progname + " {boolean x boolean y integer z x<-false; y<-true; if(x|y){ z<-10;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		//write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[0]; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void testLoadImageFromFile() throws Exception {
		String progname = "testLoadImageFromFile";
        String input = progname + " file f{image img \n f -> img;} ";
        Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
        show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

		byte[] bytecode = (byte[]) program.visit(cv, null);

		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = {"bin/Oregon1.JPG"}; //
		try {
			Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
			instance.run();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
			throw e;
		}
	}

    @Test
    public void testBinaryAddImage() throws Exception {
        String progname = "testBinaryAddImage";
        String input = progname + " file f1, file f2, file f3{" +
                "image img1 \n f1 -> img1; \n image img2 \n" +
                "f2 -> img2; image img3 img3 <- img1 + img2;\n" +
                "img3 -> f3;} ";
        Scanner scanner = new Scanner(input);
        scanner.scan();
        Parser parser = new Parser(scanner);
        ASTNode program = parser.parse();
        TypeCheckVisitor v = new TypeCheckVisitor();
        program.visit(v, null);
        show(program);

        // generate code
        CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

        byte[] bytecode = (byte[]) program.visit(cv, null);

        CodeGenUtils.dumpBytecode(bytecode);

        // write byte code to file
        String name = ((Program) program).getName();
        String classFileName = "bin/" + name + ".class";
        OutputStream output = new FileOutputStream(classFileName);
        output.write(bytecode);
        output.close();
        System.out.println("wrote classfile to " + classFileName);

        // directly execute bytecode
        String[] args = {"bin/image.jpg", "bin/image1.jpg", "bin/imgAdd.jpg"};
        try {
            Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
            instance.run();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
            throw e;
        }
    }

    @Test
    public void testBinarySubImage() throws Exception {
        String progname = "testBinarySubImage";
        String input = progname + " file f1, file f2, file f3{" +
                "image img1 \n f1 -> img1; \n image img2 \n" +
                "f2 -> img2; image img3 img3 <- img1 - img2;\n" +
                "img3 -> f3;} ";
        Scanner scanner = new Scanner(input);
        scanner.scan();
        Parser parser = new Parser(scanner);
        ASTNode program = parser.parse();
        TypeCheckVisitor v = new TypeCheckVisitor();
        program.visit(v, null);
        show(program);

        // generate code
        CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

        byte[] bytecode = (byte[]) program.visit(cv, null);

        CodeGenUtils.dumpBytecode(bytecode);

        // write byte code to file
        String name = ((Program) program).getName();
        String classFileName = "bin/" + name + ".class";
        OutputStream output = new FileOutputStream(classFileName);
        output.write(bytecode);
        output.close();
        System.out.println("wrote classfile to " + classFileName);

        // directly execute bytecode
        String[] args = {"bin/image.jpg", "bin/image1.jpg", "bin/imgSub.jpg"};
        try {
            Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
            instance.run();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
            throw e;
        }
    }

    @Test
    public void testBinaryMulImage() throws Exception {
        String progname = "testBinaryMulImage";
        String input = progname + " file f1, file f2, file f3{" +
                "image img1 \n f1 -> img1; \n image img2 \n" +
                "f2 -> img2; image img3 img3 <- img1 * 2;\n" +
                "img3 -> f3;} ";
        Scanner scanner = new Scanner(input);
        scanner.scan();
        Parser parser = new Parser(scanner);
        ASTNode program = parser.parse();
        TypeCheckVisitor v = new TypeCheckVisitor();
        program.visit(v, null);
        show(program);

        // generate code
        CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

        byte[] bytecode = (byte[]) program.visit(cv, null);

        CodeGenUtils.dumpBytecode(bytecode);

        // write byte code to file
        String name = ((Program) program).getName();
        String classFileName = "bin/" + name + ".class";
        OutputStream output = new FileOutputStream(classFileName);
        output.write(bytecode);
        output.close();
        System.out.println("wrote classfile to " + classFileName);

        // directly execute bytecode
        String[] args = {"bin/image.jpg", "bin/image1.jpg", "bin/imgMul.jpg"};
        try {
            Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
            instance.run();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
            throw e;
        }
    }

    @Test
    public void testBinaryDivImage() throws Exception {
        String progname = "testBinaryDivImage";
        String input = progname + " file f1, file f2, file f3{" +
                "image img1 \n f1 -> img1; \n image img2 \n" +
                "f2 -> img2; image img3 img3 <- img1 / 5;\n" +
                "img3 -> f3;} ";
        Scanner scanner = new Scanner(input);
        scanner.scan();
        Parser parser = new Parser(scanner);
        ASTNode program = parser.parse();
        TypeCheckVisitor v = new TypeCheckVisitor();
        program.visit(v, null);
        show(program);

        // generate code
        CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

        byte[] bytecode = (byte[]) program.visit(cv, null);

        CodeGenUtils.dumpBytecode(bytecode);

        // write byte code to file
        String name = ((Program) program).getName();
        String classFileName = "bin/" + name + ".class";
        OutputStream output = new FileOutputStream(classFileName);
        output.write(bytecode);
        output.close();
        System.out.println("wrote classfile to " + classFileName);

        // directly execute bytecode
        String[] args = {"bin/image.jpg", "bin/image1.jpg", "bin/imgDiv.jpg"};
        try {
            Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
            instance.run();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
            throw e;
        }
    }

    @Test
    public void testBinaryModImage() throws Exception {
        String progname = "testBinaryModImage";
        String input = progname + " file f1, file f2, file f3{" +
                "image img1 \n f1 -> img1; \n image img2 \n" +
                "f2 -> img2; image img3 img3 <- img1 % 3;\n" +
                "img3 -> f3;} ";
        Scanner scanner = new Scanner(input);
        scanner.scan();
        Parser parser = new Parser(scanner);
        ASTNode program = parser.parse();
        TypeCheckVisitor v = new TypeCheckVisitor();
        program.visit(v, null);
        show(program);

        // generate code
        CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

        byte[] bytecode = (byte[]) program.visit(cv, null);

        CodeGenUtils.dumpBytecode(bytecode);

        // write byte code to file
        String name = ((Program) program).getName();
        String classFileName = "bin/" + name + ".class";
        OutputStream output = new FileOutputStream(classFileName);
        output.write(bytecode);
        output.close();
        System.out.println("wrote classfile to " + classFileName);

        // directly execute bytecode
        String[] args = {"bin/image.jpg", "bin/image1.jpg", "bin/imgMod.jpg"};
        try {
            Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
            instance.run();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
            throw e;
        }
    }

    @Test
    public void testChain() throws Exception {
        String progname = "testChain";
        String input = progname + " file f1, file f2 {image i \n f1 -> i; \n i -> blur -> f2;} ";
        Scanner scanner = new Scanner(input);
        scanner.scan();
        Parser parser = new Parser(scanner);
        ASTNode program = parser.parse();
        TypeCheckVisitor v = new TypeCheckVisitor();
        program.visit(v, null);
        show(program);

        // generate code
        CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

        byte[] bytecode = (byte[]) program.visit(cv, null);

        CodeGenUtils.dumpBytecode(bytecode);

        // write byte code to file
        String name = ((Program) program).getName();
        String classFileName = "bin/" + name + ".class";
        OutputStream output = new FileOutputStream(classFileName);
        output.write(bytecode);
        output.close();
        System.out.println("wrote classfile to " + classFileName);

        // directly execute bytecode
        String[] args = {"bin/image.jpg", "bin/imgOut.jpg"};
        try {
            Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
            instance.run();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
            throw e;
        }
    }

    @Test
    public void testExtendedChain() throws Exception {
        String progname = "testExtendedChain";
        String input = progname + " file f1, file f2 {image i \n f1 -> i; \n " +
                "i -> blur -> convolve -> gray -> f2;} ";
        Scanner scanner = new Scanner(input);
        scanner.scan();
        Parser parser = new Parser(scanner);
        ASTNode program = parser.parse();
        TypeCheckVisitor v = new TypeCheckVisitor();
        program.visit(v, null);
        show(program);

        // generate code
        CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

        byte[] bytecode = (byte[]) program.visit(cv, null);

        CodeGenUtils.dumpBytecode(bytecode);

        // write byte code to file
        String name = ((Program) program).getName();
        String classFileName = "bin/" + name + ".class";
        OutputStream output = new FileOutputStream(classFileName);
        output.write(bytecode);
        output.close();
        System.out.println("wrote classfile to " + classFileName);

        // directly execute bytecode
        String[] args = {"bin/image.jpg", "bin/imgOut1.jpg"};
        try {
            Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
            instance.run();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
            throw e;
        }
    }

    @Test
    public void testFrames() throws Exception {
        String progname = "testFrames";
        String input = progname + " file f1{" +
                " image i frame fr f1 -> i;" +
                " i -> fr; \n" +
                " fr -> show; \n" +
                " sleep(1000);}";
        Scanner scanner = new Scanner(input);
        scanner.scan();
        Parser parser = new Parser(scanner);
        ASTNode program = parser.parse();
        TypeCheckVisitor v = new TypeCheckVisitor();
        program.visit(v, null);
        show(program);

        // generate code
        CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

        byte[] bytecode = (byte[]) program.visit(cv, null);

        CodeGenUtils.dumpBytecode(bytecode);

        // write byte code to file
        String name = ((Program) program).getName();
        String classFileName = "bin/" + name + ".class";
        OutputStream output = new FileOutputStream(classFileName);
        output.write(bytecode);
        output.close();
        System.out.println("wrote classfile to " + classFileName);

        // directly execute bytecode
        String[] args = {"bin/image1.jpg"};
        try {
            Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
            instance.run();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
            throw e;
        }
    }

    @Test
    public void testLoadImageFromUrl() throws Exception {
        String progname = "testLoadImageFromUrl";
        String input = progname + " url u {" +
                "image img \n " +
                "u -> img;\n" +
                "frame fr img -> fr -> show;\n" +
                "sleep(1000);\n " +
                "fr -> hide;} ";
        Scanner scanner = new Scanner(input);
        scanner.scan();
        Parser parser = new Parser(scanner);
        ASTNode program = parser.parse();
        TypeCheckVisitor v = new TypeCheckVisitor();
        program.visit(v, null);
        show(program);

        // generate code
        CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

        byte[] bytecode = (byte[]) program.visit(cv, null);

        CodeGenUtils.dumpBytecode(bytecode);

        // write byte code to file
        String name = ((Program) program).getName();
        String classFileName = "bin/" + name + ".class";
        OutputStream output = new FileOutputStream(classFileName);
        output.write(bytecode);
        output.close();
        System.out.println("wrote classfile to " + classFileName);

        // directly execute bytecode
        String[] args = {"http://www.gettyimages.com/gi-resources/images/Embed/new/embed2.jpg"}; //
        try {
            Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
            instance.run();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
            throw e;
        }
    }

    @Test
    public void testFramesExtended() throws Exception {
        String progname = "testFramesExtended";
        String input = progname + " file f1, file f2 {" +
                " image i frame fr f1 -> i;" +
                " i -> scale(3) -> i; \n" +
                " i -> fr; \n" +
                " fr -> show; \n" +
                " sleep(1000); \n" +
                " fr -> hide;\n" +
                " i -> f2;} ";
        Scanner scanner = new Scanner(input);
        scanner.scan();
        Parser parser = new Parser(scanner);
        ASTNode program = parser.parse();
        TypeCheckVisitor v = new TypeCheckVisitor();
        program.visit(v, null);
        show(program);

        // generate code
        CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

        byte[] bytecode = (byte[]) program.visit(cv, null);

        CodeGenUtils.dumpBytecode(bytecode);

        // write byte code to file
        String name = ((Program) program).getName();
        String classFileName = "bin/" + name + ".class";
        OutputStream output = new FileOutputStream(classFileName);
        output.write(bytecode);
        output.close();
        System.out.println("wrote classfile to " + classFileName);

        // directly execute bytecode
        String[] args = {"bin/image1.jpg", "bin/imgOut1.jpg"};
        try {
            Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
            instance.run();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
            throw e;
        }
    }

    @Test
    public void testFramesExtended2() throws Exception {
        String progname = "testFramesExtended2";
        String input = progname + " file f1{" +
                " image i frame fr f1 -> i;" +
                " i -> fr; \n" +
                " fr -> show; \n" +
                "sleep(1000); \n" +
                " fr -> hide; \n" +
                " i -> gray -> fr; \n" +
                " fr -> show; \n" +
                " sleep(1000);}";
        Scanner scanner = new Scanner(input);
        scanner.scan();
        Parser parser = new Parser(scanner);
        ASTNode program = parser.parse();
        TypeCheckVisitor v = new TypeCheckVisitor();
        program.visit(v, null);
        show(program);

        // generate code
        CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

        byte[] bytecode = (byte[]) program.visit(cv, null);

        CodeGenUtils.dumpBytecode(bytecode);

        // write byte code to file
        String name = ((Program) program).getName();
        String classFileName = "bin/" + name + ".class";
        OutputStream output = new FileOutputStream(classFileName);
        output.write(bytecode);
        output.close();
        System.out.println("wrote classfile to " + classFileName);

        // directly execute bytecode
        String[] args = {"bin/image1.jpg"};
        try {
            Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
            instance.run();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
            throw e;
        }
    }

    @Test
    public void testFrameOperations() throws Exception {
        String progname = "testFrameOperations";
        String input = progname + " file f, url u { \n"
                + "integer i1 integer i2 image img1 image img2 frame fr\n"
                + "f -> img1;\n"
                + "u -> img1;\n"
                + "img1->img2;\n"
                + "img1-> fr-> show -> move(screenwidth, screenheight); \n"
                + "sleep(1000); fr -> hide;\n"
                + "fr -> xloc -> i1;\n"
                + "fr -> yloc -> i2;\n"
                + "img1 -> fr -> show -> move(i1 - 1000, i2 - 1200); \n"
                + "sleep(1000);}";
        Scanner scanner = new Scanner(input);
        scanner.scan();
        Parser parser = new Parser(scanner);
        ASTNode program = parser.parse();
        TypeCheckVisitor v = new TypeCheckVisitor();
        program.visit(v, null);
        show(program);

        // generate code
        CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);

        byte[] bytecode = (byte[]) program.visit(cv, null);

        CodeGenUtils.dumpBytecode(bytecode);

        // write byte code to file
        String name = ((Program) program).getName();
        String classFileName = "bin/" + name + ".class";
        OutputStream output = new FileOutputStream(classFileName);
        output.write(bytecode);
        output.close();
        System.out.println("wrote classfile to " + classFileName);

        // directly execute bytecode
        String[] args = {"bin/image1.jpg",
                "http://www.gettyimages.com/gi-resources/images/Embed/new/embed2.jpg"};
        try {
            Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
            instance.run();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
            throw e;
        }
    }
}

